AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Intermediate Web Application

Globals:
  Function:
    Runtime: nodejs8.10

Resources:
  LambdaForCloudFormation:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaForCloudFormation
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        -
          PolicyName: UpdateUserPoolClient
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
        -
          PolicyName: CreateFirstUserPoolUser
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:SignUp'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false

  UserPoolClientSettings:
    Type: 'Custom::UserPoolClientSettings'
    Properties:
      ServiceToken: !GetAtt UserPoolClientSettingsFunction.Arn
      UserPoolId: !Ref UserPool
      UserPoolClientId: !Ref UserPoolClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
        - email
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH 
  
  UserPoolClientSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleUserPoolClientSettings
      Role: !GetAtt LambdaForCloudFormation.Arn

  UserPoolFirstUser:
    Type: 'Custom::UserPoolFirstUser'
    DependsOn: 
      - UserPoolClientSettings
    Properties:
      ServiceToken: !GetAtt UserPoolFirstUserFunction.Arn
      ClientId: !Ref UserPoolClient
      Username: 'max.mustermann@test.de'
      Password: '1234qwer'

  UserPoolFirstUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleCreateFirstUser
      Role: !GetAtt LambdaForCloudFormation.Arn
  

  LambdaUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}'

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleCognitoPreSignup

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  GetBasePathFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleGetBasePath
      Events:
        GetBasePath:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: GET
            Auth:
              Authorizer: NONE

  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleQuery
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Store
      Environment:
        Variables:
          TABLE_NAME: !Ref Store
      Events:
        FindObjects:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}
            Method: GET
        ReadObject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}/{objectId}
            Method: GET

  WriteFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleWrite
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Store
      Environment:
        Variables:
          TABLE_NAME: !Ref Store
      Events:
        CreateObject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}
            Method: POST
        UpdateObject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}/{objectId}
            Method: PUT
        DeleteObject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}/{objectId}
            Method: DELETE

  FileUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleGetUploadUrl
      Environment:
        Variables:
          BUCKET_NAME: !Ref FilesBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref FilesBucket
      Events:
        FileUploadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}/{objectId}/files/{fileName}
            Method: GET
  
  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
              
  FilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FilesBucket
      PolicyDocument:
        Statement:
          - Sid: PublicGetObject
            Effect: 'Allow'
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${FilesBucket}/*'

  Store:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: 'objectId'
          KeyType: 'HASH'
      AttributeDefinitions:
        - AttributeName: 'objectId'
          AttributeType: 'S'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Statement:
          - Sid: CloudFrontOriginGetObject
            Effect: 'Allow'
            Principal: 
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action:
              - 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${StaticAssetsBucket}/*'
            
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'CloudFrontOriginAccessIdentityConfig'

  StaticAssetsDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        HttpVersion: http2
        Enabled: true
        PriceClass: 'PriceClass_100'
        ViewerCertificate: 
          CloudFrontDefaultCertificate: true
        Origins:
          - Id: !Sub 'S3-${StaticAssetsBucket}'
            DomainName: !GetAtt StaticAssetsBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: !Sub 'S3-${StaticAssetsBucket}'
          ViewerProtocolPolicy: 'redirect-to-https'

Outputs:
  ApiId:
    Description: 'API Gateway Id'
    Value: !Ref ApiGateway

  ApiUrl:
    Description: 'API Gateway endpoint URL for Prod stage'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/'

  UserPoolId:
    Description: 'User Pool Id'
    Value: !Ref UserPool

  UserPoolClientId:
    Description: 'User Pool Client Id'
    Value: !Ref UserPoolClient
  
  FilesBucket:
    Description: 'Files Bucket Id'
    Value: !Ref FilesBucket
  
  StaticAssetsBucket:
    Description: 'Static Assets Bucket Id'
    Value: !Ref StaticAssetsBucket
  
  StaticAssetsDistribution:
    Description: 'Static Assets Url'
    Value: !Sub 'https://${StaticAssetsDistribution.DomainName}'
