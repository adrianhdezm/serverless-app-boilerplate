AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Intermediate Web Application

Globals:
  Function:
    Runtime: nodejs8.10

Resources:
  LambdaForCloudFormation:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaForCloudFormation
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        -
          PolicyName: UpdateUserPoolClient
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false

  CognitoUserPoolClientSettings:
    Type: 'Custom::CognitoUserPoolClientSettings'
    Properties:
      ServiceToken: !GetAtt UserPoolClientSettingsFunction.Arn
      UserPoolId: !Ref CognitoUserPool
      UserPoolClientId: !Ref CognitoUserPoolClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
        - email
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH   
  
  UserPoolClientSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleUserPoolClientSettings
      Role: !GetAtt LambdaForCloudFormation.Arn

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}'

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleCognitoPreSignup

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  GetBasePathFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleGetBasePath
      Events:
        GetBasePath:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: GET
            Auth:
              Authorizer: NONE

  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleQuery
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Store
      Environment:
        Variables:
          TABLE_NAME: !Ref Store
      Events:
        FindObjects:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}
            Method: GET
        ReadObject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}/{objectId}
            Method: GET

  WriteFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 3
      Handler: index.handleWrite
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Store
      Environment:
        Variables:
          TABLE_NAME: !Ref Store
      Events:
        CreateObject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}
            Method: POST
        UpdateObject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}/{objectId}
            Method: PUT
        DeleteObject:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /classes/{className}/{objectId}
            Method: DELETE

  Store:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: 'objectId'
          KeyType: 'HASH'
      AttributeDefinitions:
        - AttributeName: 'objectId'
          AttributeType: 'S'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  ApiId:
    Description: 'API Gateway Id'
    Value: !Ref ApiGateway

  ApiUrl:
    Description: 'API Gateway endpoint URL for Prod stage'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/'

  CognitoUserPoolId:
    Description: 'Cognito User Pool Id'
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: 'Cognito User Pool Client Id'
    Value: !Ref CognitoUserPoolClient
